<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
         <!--配置Spring MVC-->
         <!--1:开启Spring MVC 注解模式-->
         <!-- 简化配置：
                  （1）自动注册 DefaultAnnotationHandlerMapping，AnnotationMethodHandlerAdapter
                  （2）提供一系列：数据绑定，数字和日期的format @NumberFormat，@DataTimeFormat,
                       xml,json的默认读写支持-->
          <mvc:annotation-driven/>

          <!--2： 静态资源默认servlet配置
              （1）加入对静态资源的处理：js，gif，png
              （2）允许使用“/”做整体映射-->
          <mvc:default-servlet-handler/>
          <!--<mvc:resources location="/resources/" mapping="/resources/**" />-->




    <!--3：默认的jsp的配置-->
          <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
              <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
              <property name="prefix" value="/"/>
              <property name="suffix" value=".jsp"/>
          </bean>

          <!--4：扫描web相关的bean-->
          <context:component-scan base-package="cn.edu.tju.scs.web.controller,cn.edu.tju.scs.web.aspect"/>


          <!--启动 aspectj 支持-->
          <!-- proxy-target-class等于true是强制使用cglib代理，proxy-target-class默认是false，如果你的类实现了接口 就走JDK代理，如果没有，走cglib代理  -->
          <!-- 注：对于单利模式建议使用cglib代理，虽然JDK动态代理比cglib代理速度快，但性能不如cglib -->
          <aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true"/>



        <mvc:interceptors>
        <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
        <bean class="cn.edu.tju.scs.web.interceptor.LoginInterceptor">
            <property name="excludedUrls">
                <list>
                    <value>/login</value>
                    <value>/preLogin</value>
                    <value>/logout</value>
                    <value>.jpg</value>
                    <value>.css</value>
                    <value>.js</value>
                    <value>.woff</value>
                    <value>.woff2</value>
                    <value>.ttf</value>
                </list>
            </property>
        </bean>
            <!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
            <!--<mvc:interceptor>-->
                <!--&lt;!&ndash; 拦截所有URL中包含/user/的请求 &ndash;&gt;-->
                <!--<mvc:mapping path="/user"/>-->
                <!--<bean class="cn.edu.tju.scs.web.interceptor.LoginInterceptor"/>-->
            <!--</mvc:interceptor>-->
        </mvc:interceptors>


    <bean id="springUtils" class="cn.edu.tju.scs.SpringUtils"/>


</beans>